{"/home/travis/build/kaizhu256/node-apidoc-lite/test.js":"/* istanbul instrument in package apidoc */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw err.<message> if <passed> is falsy\n     */\n        var err;\n        if (passed) {\n            return;\n        }\n        err = (\n            // ternary-operator\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is errObj, then leave as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw err;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        target = target || {};\n        Object.keys(source || {}).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n        return target;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2 || require(\"utility2\")\n).requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.testCase_apidocCreate_default = function (options, onError) {\n/*\n * this function will test apidocCreate's default handling-behavior-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    options = {\n        // test invalid-exampleFile handling-behavior\n        exampleFileList: [\n            \"undefined\"\n        ],\n        libFileList: [\n            // test invalid-libFile handling-behavior\n            \"lib.undefined.js\"\n        ],\n        moduleDict: {\n            // test invalid-module-name handling-behavior\n            \"invalid name\": {}\n        },\n        // test packageJson handling-behavior\n        packageJson: {\n            _: \"\",\n            aa: \"bb\",\n            emailDict: {\n                email: \"a@a.com\"\n            },\n            emailList: [\n                {\n                    email: \"a@a.com\"\n                }\n            ],\n            readme: \"\"\n        }\n    };\n    // test weird-module handling-behavior\n    options.moduleDict.undefined = function () {\n        return;\n    };\n    options.moduleDict.undefined();\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/\n    // Working_with_Objects#Defining_getters_and_setters\n    Object.defineProperty(options.moduleDict.undefined, \"error\", {\n        get: local.throwError,\n        set: local.throwError\n    });\n    options.moduleDict.undefined.toString = local.throwError;\n    local.apidocCreate(options);\n    // validate options\n    local.assertJsonEqual(options.packageJson._, undefined);\n    local.assertJsonEqual(options.packageJson.aa, \"bb\");\n    local.assertJsonEqual(options.packageJson.emailDict.email, undefined);\n    local.assertJsonEqual(options.packageJson.emailList[0].email, undefined);\n    local.assertJsonEqual(options.packageJson.readme, undefined);\n    // test swgg.apiDict handling-behavior\n    options = {\n        moduleDict: {\n            undefined: {\n                swgg: {\n                    apiDict: {\n                        \"aa bb\": {}\n                    }\n                }\n            }\n        },\n        packageJson: {}\n    };\n    local.apidocCreate(options);\n    // test modeNoApidoc handling-behavior\n    options = {\n        modeNoApidoc: true\n    };\n    local.apidocCreate(options);\n    // test invalid-require handling-behavior\n    options = {\n        require: local.nop\n    };\n    local.apidocCreate(options);\n    onError(null, options);\n};\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-apidoc-lite/lib.apidoc.js":"// usr/bin/env node\n/*\n * lib.apidoc.js (2019.8.16)\n * https://github.com/kaizhu256/node-apidoc-lite\n * this zero-dependency package will auto-generate documentation for your npm-package with zero-config\n *\n */\n\n\n\n/* istanbul instrument in package apidoc */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw err.<message> if <passed> is falsy\n     */\n        var err;\n        if (passed) {\n            return;\n        }\n        err = (\n            // ternary-operator\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is errObj, then leave as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw err;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        target = target || {};\n        Object.keys(source || {}).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n        return target;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n/* istanbul ignore next */\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    // || globalThis.utility2_rollup_old\n    // || require(\"./assets.utility2.rollup.js\")\n    || globalThis.globalLocal\n);\n// init exports\nif (local.isBrowser) {\n    globalThis.utility2_apidoc = local;\n} else {\n    module.exports = local;\n    module.exports.__dirname = __dirname;\n}\n// init lib main\nlocal.apidoc = local;\n\n\n\n/* validateLineSortedReset */\nlocal.cliRun = function (opt) {\n/*\n * this function will run the cli with given <opt>\n */\n    local.cliDict._eval = local.cliDict._eval || function () {\n    /*\n     * <code>\n     * will eval <code>\n     */\n        globalThis.local = local;\n        local.vm.runInThisContext(process.argv[3]);\n    };\n    local.cliDict[\"--eval\"] = local.cliDict[\"--eval\"] || local.cliDict._eval;\n    local.cliDict[\"-e\"] = local.cliDict[\"-e\"] || local.cliDict._eval;\n    local.cliDict._help = local.cliDict._help || function () {\n    /*\n     *\n     * will print help\n     */\n        var commandList;\n        var file;\n        var packageJson;\n        var text;\n        var textDict;\n        commandList = [\n            {\n                argList: \"<arg2>  ...\",\n                description: \"usage:\",\n                command: [\n                    \"<arg1>\"\n                ]\n            }, {\n                argList: \"'console.log(\\\"hello world\\\")'\",\n                description: \"example:\",\n                command: [\n                    \"--eval\"\n                ]\n            }\n        ];\n        file = __filename.replace((\n            /.*\\//\n        ), \"\");\n        opt = Object.assign({}, opt);\n        packageJson = require(\"./package.json\");\n        // validate comment\n        opt.rgxComment = opt.rgxComment || (\n            /\\)\\u0020\\{\\n(?:|\\u0020{4})\\/\\*\\n(?:\\u0020|\\u0020{5})\\*((?:\\u0020<[^>]*?>|\\u0020\\.\\.\\.)*?)\\n(?:\\u0020|\\u0020{5})\\*\\u0020(will\\u0020.*?\\S)\\n(?:\\u0020|\\u0020{5})\\*\\/\\n(?:\\u0020{4}|\\u0020{8})\\S/\n        );\n        textDict = {};\n        Object.keys(local.cliDict).sort().forEach(function (key, ii) {\n            if (key[0] === \"_\" && key !== \"_default\") {\n                return;\n            }\n            text = String(local.cliDict[key]);\n            if (key === \"_default\") {\n                key = \"\";\n            }\n            textDict[text] = textDict[text] || (ii + 2);\n            ii = textDict[text];\n            if (commandList[ii]) {\n                commandList[ii].command.push(key);\n                return;\n            }\n            try {\n                commandList[ii] = opt.rgxComment.exec(text);\n                commandList[ii] = {\n                    argList: (commandList[ii][1] || \"\").trim(),\n                    command: [\n                        key\n                    ],\n                    description: commandList[ii][2]\n                };\n            } catch (ignore) {\n                local.assertThrow(null, new Error(\n                    \"cliRun - cannot parse comment in COMMAND \"\n                    + key\n                    + \":\\nnew RegExp(\"\n                    + JSON.stringify(opt.rgxComment.source)\n                    + \").exec(\" + JSON.stringify(text).replace((\n                        /\\\\\\\\/g\n                    ), \"\\u0000\").replace((\n                        /\\\\n/g\n                    ), \"\\\\n\\\\\\n\").replace((\n                        /\\u0000/g\n                    ), \"\\\\\\\\\") + \");\"\n                ));\n            }\n        });\n        text = \"\";\n        text += packageJson.name + \" (\" + packageJson.version + \")\\n\\n\";\n        text += commandList.filter(function (elem) {\n            return elem;\n        }).map(function (elem, ii) {\n            elem.command = elem.command.filter(function (elem) {\n                return elem;\n            });\n            switch (ii) {\n            case 0:\n            case 1:\n                elem.argList = [\n                    elem.argList\n                ];\n                break;\n            default:\n                elem.argList = elem.argList.split(\" \");\n                elem.description = (\n                    \"# COMMAND \"\n                    + (elem.command[0] || \"<none>\") + \"\\n# \"\n                    + elem.description\n                );\n            }\n            return (\n                elem.description + \"\\n  \" + file\n                + (\"  \" + elem.command.sort().join(\"|\") + \"  \")\n                    .replace((\n                    /^\\u0020{4}$/\n                ), \"  \")\n                + elem.argList.join(\"  \")\n            );\n        })\n        .join(\"\\n\\n\");\n        console.log(text);\n    };\n    local.cliDict[\"--help\"] = local.cliDict[\"--help\"] || local.cliDict._help;\n    local.cliDict[\"-h\"] = local.cliDict[\"-h\"] || local.cliDict._help;\n    local.cliDict._default = local.cliDict._default || local.cliDict._help;\n    local.cliDict.help = local.cliDict.help || local.cliDict._help;\n    local.cliDict._interactive = local.cliDict._interactive || function () {\n    /*\n     *\n     * will start interactive-mode\n     */\n        globalThis.local = local;\n        local.identity(local.replStart || require(\"repl\").start)({\n            useGlobal: true\n        });\n    };\n    local.cliDict[\"--interactive\"] = (\n        local.cliDict[\"--interactive\"]\n        || local.cliDict._interactive\n    );\n    local.cliDict[\"-i\"] = local.cliDict[\"-i\"] || local.cliDict._interactive;\n    local.cliDict._version = local.cliDict._version || function () {\n    /*\n     *\n     * will print version\n     */\n        console.log(require(__dirname + \"/package.json\").version);\n    };\n    local.cliDict[\"--version\"] = (\n        local.cliDict[\"--version\"]\n        || local.cliDict._version\n    );\n    local.cliDict[\"-v\"] = local.cliDict[\"-v\"] || local.cliDict._version;\n    // default to --help command if no arguments are given\n    if (process.argv.length <= 2) {\n        local.cliDict._help();\n        return;\n    }\n    if (local.cliDict[process.argv[2]]) {\n        local.cliDict[process.argv[2]]();\n        return;\n    }\n    local.cliDict._default();\n};\n\nlocal.moduleDirname = function (module, modulePathList) {\n/*\n * this function will search modulePathList for the module's __dirname\n */\n    var result;\n    // search process.cwd()\n    if (!module || module === \".\" || module.indexOf(\"/\") >= 0) {\n        return require(\"path\").resolve(process.cwd(), module || \"\");\n    }\n    // search modulePathList\n    [\n        \"node_modules\"\n    ]\n    .concat(modulePathList)\n    .concat(require(\"module\").globalPaths)\n    .concat([\n        process.env.HOME + \"/node_modules\", \"/usr/local/lib/node_modules\"\n    ])\n    .some(function (modulePath) {\n        try {\n            result = require(\"path\").resolve(\n                process.cwd(),\n                modulePath + \"/\" + module\n            );\n            result = require(\"fs\").statSync(result).isDirectory() && result;\n            return result;\n        } catch (ignore) {\n            result = null;\n        }\n        return result;\n    });\n    return result || \"\";\n};\n\nlocal.objectSetDefault = function (dict, defaults, depth) {\n/*\n * this function will recursively set defaults for undefined-items in dict\n */\n    dict = dict || {};\n    defaults = defaults || {};\n    Object.keys(defaults).forEach(function (key) {\n        var defaults2;\n        var dict2;\n        dict2 = dict[key];\n        // handle misbehaving getter\n        try {\n            defaults2 = defaults[key];\n        } catch (ignore) {}\n        if (defaults2 === undefined) {\n            return;\n        }\n        // init dict[key] to default value defaults[key]\n        switch (dict2) {\n        case \"\":\n        case null:\n        case undefined:\n            dict[key] = defaults2;\n            return;\n        }\n        // if dict2 and defaults2 are both non-null and non-array objects,\n        // then recurse with dict2 and defaults2\n        if (\n            depth > 1\n            // dict2 is a non-null and non-array object\n            && typeof dict2 === \"object\" && dict2 && !Array.isArray(dict2)\n            // defaults2 is a non-null and non-array object\n            && typeof defaults2 === \"object\" && defaults2\n            && !Array.isArray(defaults2)\n        ) {\n            // recurse\n            local.objectSetDefault(dict2, defaults2, depth - 1);\n        }\n    });\n    return dict;\n};\n\nlocal.stringHtmlSafe = function (text) {\n/*\n * this function will make the text html-safe\n * https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\n */\n    return text\n    .replace((\n        /&/g\n    ), \"&amp;\")\n    .replace((\n        /\"/g\n    ), \"&quot;\")\n    .replace((\n        /'/g\n    ), \"&apos;\")\n    .replace((\n        /</g\n    ), \"&lt;\")\n    .replace((\n        />/g\n    ), \"&gt;\")\n    .replace((\n        /&amp;(amp;|apos;|gt;|lt;|quot;)/ig\n    ), \"&$1\");\n};\n\n/* jslint ignore:start */\nlocal.templateApidocHtml = '\\\n<div class=\"apidocDiv\">\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\n.apidocDiv {\\n\\\n    background: #fff;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n}\\n\\\n.apidocDiv a[href] {\\n\\\n    color: #33f;\\n\\\n    font-weight: bold;\\n\\\n    text-decoration: none;\\n\\\n}\\n\\\n.apidocDiv a[href]:hover {\\n\\\n    text-decoration: underline;\\n\\\n}\\n\\\n.apidocCodeCommentSpan {\\n\\\n    background: #bbf;\\n\\\n    color: #000;\\n\\\n    display: block;\\n\\\n}\\n\\\n.apidocCodeKeywordSpan {\\n\\\n    color: #d00;\\n\\\n    font-weight: bold;\\n\\\n}\\n\\\n.apidocCodePre {\\n\\\n    background: #eef;\\n\\\n    border: 1px solid;\\n\\\n    color: #777;\\n\\\n    overflow-wrap: break-word;\\n\\\n    padding: 5px;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\n.apidocFooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.apidocModuleLi {\\n\\\n    margin-top: 10px;\\n\\\n}\\n\\\n.apidocSectionDiv {\\n\\\n    border-top: 1px solid;\\n\\\n    margin-top: 20px;\\n\\\n}\\n\\\n.apidocSignatureSpan {\\n\\\n    color: #777;\\n\\\n    font-weight: bold;\\n\\\n}\\n\\\n</style>\\n\\\n<h1>api documentation for\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n    >{{env.npm_package_name}} ({{env.npm_package_version}})</a>\\n\\\n</h1>\\n\\\n<h4>{{env.npm_package_description}}</h4>\\n\\\n<div class=\"apidocSectionDiv\"><a\\n\\\n    href=\"#apidoc.tableOfContents\"\\n\\\n    id=\"apidoc.tableOfContents\"\\n\\\n><h1>table of contents</h1></a><ol>\\n\\\n    {{#each moduleList}}\\n\\\n    <li class=\"apidocModuleLi\"><a href=\"#{{id}}\">module {{name}}</a><ol>\\n\\\n        {{#each elemList}}\\n\\\n        <li>\\n\\\n            {{#if source}}\\n\\\n            <a class=\"apidocElementLiA\" href=\"#{{id}}\">\\n\\\n            {{name}}\\n\\\n            <span class=\"apidocSignatureSpan\">{{signature}}</span>\\n\\\n            </a>\\n\\\n            {{#unless source}}\\n\\\n            <span class=\"apidocSignatureSpan\">{{name}}</span>\\n\\\n            {{/if source}}\\n\\\n        </li>\\n\\\n        {{/each elemList}}\\n\\\n    </ol></li>\\n\\\n    {{/each moduleList}}\\n\\\n</ol></div>\\n\\\n{{#each moduleList}}\\n\\\n<div class=\"apidocSectionDiv\">\\n\\\n<h1><a href=\"#{{id}}\" id=\"{{id}}\">module {{name}}</a></h1>\\n\\\n    {{#each elemList}}\\n\\\n    {{#if source}}\\n\\\n    <h2>\\n\\\n        <a href=\"#{{id}}\" id=\"{{id}}\">\\n\\\n        {{name}}\\n\\\n        <span class=\"apidocSignatureSpan\">{{signature}}</span>\\n\\\n        </a>\\n\\\n    </h2>\\n\\\n    <ul>\\n\\\n    <li>description and source-code<pre class=\"apidocCodePre\">{{source truncate 4096}}</pre></li>\\n\\\n    <li>example usage<pre class=\"apidocCodePre\">{{example}}</pre></li>\\n\\\n    </ul>\\n\\\n    {{/if source}}\\n\\\n    {{/each elemList}}\\n\\\n</div>\\n\\\n{{/each moduleList}}\\n\\\n<div class=\"apidocFooterDiv\">\\n\\\n    [ this document was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</div>\\n\\\n';\n/* jslint ignore:end */\n\nlocal.templateRender = function (template, dict, opt) {\n/*\n * this function will render the template with given dict\n */\n    var argList;\n    var getValue;\n    var match;\n    var renderPartial;\n    var rgx;\n    var skip;\n    var value;\n    dict = dict || {};\n    opt = opt || {};\n    getValue = function (key) {\n        argList = key.split(\" \");\n        value = dict;\n        if (argList[0] === \"#this/\") {\n            return;\n        }\n        // iteratively lookup nested values in the dict\n        argList[0].split(\".\").forEach(function (key) {\n            if (key !== \"this\") {\n                value = value && value[key];\n            }\n        });\n        return value;\n    };\n    renderPartial = function (match0, helper, key, partial) {\n        switch (helper) {\n        case \"each\":\n        case \"eachTrimRightComma\":\n            value = getValue(key);\n            value = (\n                Array.isArray(value)\n                ? value.map(function (dict) {\n                    // recurse with partial\n                    return local.templateRender(partial, dict, opt);\n                }).join(\"\")\n                : \"\"\n            );\n            // remove trailing-comma from last elem\n            if (helper === \"eachTrimRightComma\") {\n                value = value.trimRight().replace((\n                    /,$/\n                ), \"\");\n            }\n            return value;\n        case \"if\":\n            partial = partial.split(\"{{#unless \" + key + \"}}\");\n            partial = (\n                getValue(key)\n                ? partial[0]\n                // handle 'unless' case\n                : partial.slice(1).join(\"{{#unless \" + key + \"}}\")\n            );\n            // recurse with partial\n            return local.templateRender(partial, dict, opt);\n        case \"unless\":\n            return (\n                getValue(key)\n                ? \"\"\n                // recurse with partial\n                : local.templateRender(partial, dict, opt)\n            );\n        default:\n            // recurse with partial\n            return match0[0] + local.templateRender(match0.slice(1), dict, opt);\n        }\n    };\n    // render partials\n    rgx = (\n        /\\{\\{#(\\w+)\\u0020([^}]+?)\\}\\}/g\n    );\n    template = template || \"\";\n    match = rgx.exec(template);\n    while (match) {\n        rgx.lastIndex += 1 - match[0].length;\n        template = template.replace(\n            new RegExp(\n                \"\\\\{\\\\{#(\" + match[1] + \") (\" + match[2]\n                + \")\\\\}\\\\}([\\\\S\\\\s]*?)\\\\{\\\\{/\" + match[1] + \" \" + match[2]\n                + \"\\\\}\\\\}\"\n            ),\n            renderPartial\n        );\n        match = rgx.exec(template);\n    }\n    // search for keys in the template\n    return template.replace((\n        /\\{\\{[^}]+?\\}\\}/g\n    ), function (match0) {\n        var markdownToHtml;\n        var notHtmlSafe;\n        notHtmlSafe = opt.notHtmlSafe;\n        try {\n            getValue(match0.slice(2, -2));\n            if (value === undefined) {\n                return match0;\n            }\n            argList.slice(1).forEach(function (arg0, ii, list) {\n                switch (arg0) {\n                case \"alphanumeric\":\n                    value = value.replace((\n                        /\\W/g\n                    ), \"_\");\n                    break;\n                case \"decodeURIComponent\":\n                    value = decodeURIComponent(value);\n                    break;\n                case \"encodeURIComponent\":\n                    value = encodeURIComponent(value);\n                    break;\n                case \"jsonStringify\":\n                    value = JSON.stringify(value);\n                    break;\n                case \"jsonStringify4\":\n                    value = JSON.stringify(value, null, 4);\n                    break;\n                case \"markdownSafe\":\n                    value = value.replace((\n                        /`/g\n                    ), \"'\");\n                    break;\n                case \"markdownToHtml\":\n                    markdownToHtml = true;\n                    break;\n                case \"notHtmlSafe\":\n                    notHtmlSafe = true;\n                    break;\n                case \"padEnd\":\n                case \"padStart\":\n                case \"slice\":\n                    skip = ii + 2;\n                    value = String(value)[arg0](\n                        list[skip - 1],\n                        list[skip]\n                    );\n                    break;\n                case \"truncate\":\n                    skip = ii + 1;\n                    if (value.length > list[skip]) {\n                        value = value.slice(\n                            0,\n                            Math.max(list[skip] - 3, 0)\n                        ).trimRight() + \"...\";\n                    }\n                    break;\n                // default to String.prototype[arg0]()\n                default:\n                    if (ii <= skip) {\n                        break;\n                    }\n                    value = value[arg0]();\n                }\n            });\n            value = String(value);\n            // default to htmlSafe\n            if (!notHtmlSafe) {\n                value = value\n                .replace((\n                    /&/g\n                ), \"&amp;\")\n                .replace((\n                    /\"/g\n                ), \"&quot;\")\n                .replace((\n                    /'/g\n                ), \"&apos;\")\n                .replace((\n                    /</g\n                ), \"&lt;\")\n                .replace((\n                    />/g\n                ), \"&gt;\")\n                .replace((\n                    /&amp;(amp;|apos;|gt;|lt;|quot;)/ig\n                ), \"&$1\");\n            }\n            markdownToHtml = (\n                markdownToHtml\n                && (typeof local.marked === \"function\" && local.marked)\n            );\n            if (markdownToHtml) {\n                value = markdownToHtml(value)\n                .replace((\n                    /&amp;(amp;|apos;|gt;|lt;|quot;)/ig\n                ), \"&$1\");\n            }\n            return value;\n        } catch (errCaught) {\n            errCaught.message = (\n                \"templateRender could not render expression \"\n                + JSON.stringify(match0)\n                + \"\\n\"\n            ) + errCaught.message;\n            local.assertThrow(null, errCaught);\n        }\n    });\n};\n\nlocal.tryCatchOnError = function (fnc, onError) {\n/*\n * this function will run the fnc in a tryCatch block,\n * else call onError with errCaught\n */\n    var result;\n    // validate onError\n    local.assertThrow(typeof onError === \"function\", typeof onError);\n    try {\n        // reset errCaught\n        local._debugTryCatchError = null;\n        result = fnc();\n        local._debugTryCatchError = null;\n        return result;\n    } catch (errCaught) {\n        // debug errCaught\n        local._debugTryCatchError = errCaught;\n        return onError(errCaught);\n    }\n};\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.apidocCreate = function (opt) {\n/*\n * this function will create the apidoc from <opt>.dir\n */\n    var elemCreate;\n    var module;\n    var moduleMain;\n    var readExample;\n    var tmp;\n    var toString;\n    var trimLeft;\n    elemCreate = function (module, prefix, key) {\n    /*\n     * this function will create the apidoc-elem in given <module>\n     */\n        var elem;\n        if (opt.modeNoApidoc) {\n            return elem;\n        }\n        elem = {};\n        elem.moduleName = prefix.split(\".\");\n        // handle case where module is a function\n        if (elem.moduleName.slice(-1)[0] === key) {\n            elem.moduleName.pop();\n        }\n        elem.moduleName = elem.moduleName.join(\".\");\n        elem.id = encodeURIComponent(\"apidoc.elem.\" + prefix + \".\" + key);\n        elem.typeof = typeof module[key];\n        elem.name = (\n            elem.typeof + \" <span class=\\\"apidocSignatureSpan\\\">\"\n            + elem.moduleName + \".</span>\" + key\n        )\n            // handle case where module is a function\n            .replace(\">.<\", \"><\");\n        if (elem.typeof !== \"function\") {\n            return elem;\n        }\n        // init source\n        elem.source = local.stringHtmlSafe(\n            trimLeft(toString(module[key])) || \"n/a\"\n        ).replace((\n            /\\([\\S\\s]*?\\)/\n        ), function (match0) {\n            // init signature\n            elem.signature = match0.replace((\n                /\\u0020*?\\/\\*[\\S\\s]*?\\*\\/\\u0020*/g\n            ), \"\")\n            .replace((\n                /,/g\n            ), \", \")\n            .replace((\n                /\\s+/g\n            ), \" \");\n            return elem.signature;\n        })\n        .replace((\n            /(\\u0020*?\\/\\*[\\S\\s]*?\\*\\/\\n)/\n        ), \"<span class=\\\"apidocCodeCommentSpan\\\">$1</span>\")\n        .replace((\n            /^function\\u0020\\(/\n        ), key + \" = function (\");\n        // init example\n        opt.exampleList.some(function (example) {\n            example.replace(\n                new RegExp(\"((?:\\n.*?){8}\\\\.)(\" + key + \")(\\\\((?:.*?\\n){8})\"),\n                function (ignore, match1, match2, match3) {\n                    elem.example = \"...\" + trimLeft(\n                        local.stringHtmlSafe(match1)\n                        + \"<span class=\\\"apidocCodeKeywordSpan\\\">\"\n                        + local.stringHtmlSafe(match2)\n                        + \"</span>\"\n                        + local.stringHtmlSafe(match3)\n                    ).trimRight() + \"\\n...\";\n                }\n            );\n            return elem.example;\n        });\n        elem.example = elem.example || \"n/a\";\n        return elem;\n    };\n    readExample = function (file) {\n    /*\n     * this function will read the example from given file\n     */\n        var result;\n        local.tryCatchOnError(function () {\n            file = local.path.resolve(opt.dir, file);\n            console.error(\"apidocCreate - readExample \" + file);\n            result = \"\";\n            result = (\n                \"\\n\\n\\n\\n\\n\\n\\n\\n\"\n                // bug-workaround - truncate example to manageable size\n                + local.fs.readFileSync(file, \"utf8\").slice(0, 262144)\n                + \"\\n\\n\\n\\n\\n\\n\\n\\n\"\n            ).replace((\n                /\\r\\n*/g\n            ), \"\\n\");\n        }, console.error);\n        return result;\n    };\n    toString = function (value) {\n    /*\n     * this function will try to return the string form of the value\n     */\n        var result;\n        local.tryCatchOnError(function () {\n            result = \"\";\n            result = String(value);\n        }, console.error);\n        return result;\n    };\n    trimLeft = function (text) {\n    /*\n     * this function will normalize the whitespace around the text\n     */\n        var whitespace;\n        whitespace = \"\";\n        text.trim().replace((\n            /^\\u0020*/gm\n        ), function (match0) {\n            if (!whitespace || match0.length < whitespace.length) {\n                whitespace = match0;\n            }\n        });\n        text = text.replace(new RegExp(\"^\" + whitespace, \"gm\"), \"\");\n        // enforce 128 character column limit\n        text = text.replace((\n            /^.{128}[^\\\\\\n]+/gm\n        ), function (match0) {\n            return match0.replace((\n                /(.{128}(?:\\b|\\w+))/g\n            ), \"$1\\n\").trimRight();\n        });\n        return text;\n    };\n    // init opt\n    opt.dir = local.moduleDirname(\n        opt.dir,\n        opt.modulePathList || require(\"module\").paths\n    );\n    local.objectSetDefault(opt, {\n        env: {\n            npm_package_description: \"\"\n        },\n        packageJson: JSON.parse(readExample(\"package.json\")),\n        require: function (file) {\n            return local.tryCatchOnError(function () {\n                return require(file);\n            }, console.error);\n        }\n    });\n    Object.keys(opt.packageJson).forEach(function (key) {\n        tmp = opt.packageJson[key];\n        // strip email from npmdoc documentation\n        // https://github.com/npmdoc/node-npmdoc-hpp/issues/1\n        if (tmp) {\n            if (tmp.email) {\n                delete tmp.email;\n            }\n            if (Array.isArray(tmp)) {\n                tmp.forEach(function (elem) {\n                    if (elem && elem.email) {\n                        delete elem.email;\n                    }\n                });\n            }\n        }\n        if (key[0] === \"_\" || key === \"readme\") {\n            delete opt.packageJson[key];\n        } else if (typeof tmp === \"string\") {\n            opt.env[\"npm_package_\" + key] = tmp;\n        }\n    });\n    local.objectSetDefault(opt, {\n        blacklistDict: {\n            globalThis\n        },\n        circularSet: new Set([\n            globalThis\n        ]),\n        exampleDict: {},\n        exampleList: [],\n        html: \"\",\n        libFileList: [],\n        moduleDict: {},\n        moduleExtraDict: {},\n        packageJson: {\n            bin: {}\n        },\n        template: local.templateApidocHtml,\n        whitelistDict: {}\n    }, 2);\n    // init exampleList\n    ([\n        1, 2, 3, 4\n    ]).forEach(function (depth) {\n        opt.exampleList = opt.exampleList.concat(\n            // find . -maxdepth 1 -mindepth 1 -name \"*.js\" -type f\n            // https://stackoverflow.com/questions/4509624/how-to-limit-depth-for-recursive-file-list\n            local.child_process.execSync(\n                \"find \\\"\" + opt.dir\n                + \"\\\" -maxdepth \" + depth + \" -mindepth \" + depth\n                + \" -type f | sed -e \\\"s|\" + opt.dir\n                + \"/||\\\" | grep -iv \"\n/* jslint ignore:start */\n+ '\"\\\n/\\\\.\\\\|\\\\(\\\\b\\\\|_\\\\)\\\\(\\\nbower_component\\\\|\\\ncoverage\\\\|\\\ngit\\\\|\\\nmin\\\\|\\\nnode_module\\\\|\\\nrollup\\\\|\\\ntmp\\\\|\\\nvendor\\\\)s\\\\{0,1\\\\}\\\\(\\\\b\\\\|_\\\\)\\\n\" '\n/* jslint ignore:end */\n                + \" | sort | head -n 256\"\n            ).toString()\n            .split(\"\\n\")\n        );\n    });\n    opt.exampleList = opt.exampleList.filter(function (file) {\n        if (file && !opt.exampleDict[file]) {\n            opt.exampleDict[file] = true;\n            return true;\n        }\n    }).slice(0, 256).map(readExample);\n    // init moduleMain\n    local.tryCatchOnError(function () {\n        console.error(\"apidocCreate - requiring \" + opt.dir + \" ...\");\n        moduleMain = {};\n        moduleMain = (\n            opt.moduleDict[opt.env.npm_package_name]\n            || opt.require(opt.dir)\n            || opt.require(\n                opt.dir + \"/\"\n                + (opt.packageJson.bin)[Object.keys(opt.packageJson.bin)[0]]\n            ) || {}\n        );\n        opt.circularSet.add(moduleMain);\n        console.error(\"apidocCreate - ... required \" + opt.dir);\n    }, console.error);\n    tmp = {};\n    // handle case where module is a function\n    if (typeof moduleMain === \"function\") {\n        (function () {\n            var text;\n            text = toString(moduleMain);\n            tmp = function () {\n                return;\n            };\n            // coverage-hack\n            tmp();\n            Object.defineProperties(tmp, {\n                toString: {\n                    get: function () {\n                        return function () {\n                            return text;\n                        };\n                    }\n                }\n            });\n        }());\n    }\n    // normalize moduleMain\n    moduleMain = local.objectSetDefault(tmp, moduleMain);\n    opt.moduleDict[opt.env.npm_package_name] = moduleMain;\n    // init circularSet - builtins\n    [\n        \"assert\",\n        \"buffer\",\n        \"child_process\",\n        \"cluster\",\n        \"crypto\",\n        \"dgram\",\n        \"dns\",\n        \"domain\",\n        \"events\",\n        \"fs\",\n        \"http\",\n        \"https\",\n        \"net\",\n        \"os\",\n        \"path\",\n        \"querystring\",\n        \"readline\",\n        \"repl\",\n        \"stream\",\n        \"string_decoder\",\n        \"timers\",\n        \"tls\",\n        \"tty\",\n        \"url\",\n        \"util\",\n        \"vm\",\n        \"zlib\"\n    ].forEach(function (key) {\n        local.tryCatchOnError(function () {\n            opt.circularSet.add(require(key));\n        }, local.nop);\n    });\n    // init circularSet - blacklistDict\n    Object.keys(opt.blacklistDict).forEach(function (key) {\n        opt.circularSet.add(opt.blacklistDict[key]);\n    });\n    // init circularSet - moduleDict\n    Object.keys(opt.moduleDict).forEach(function (key) {\n        opt.circularSet.add(opt.moduleDict[key]);\n    });\n    // init circularSet - prototype\n    opt.circularSet.forEach(function (elem) {\n        opt.circularSet.add(elem && elem.prototype);\n    });\n    // init moduleDict child\n    local.apidocModuleDictAdd(opt, opt.moduleDict);\n    // init swgg.apiDict\n    Object.keys(\n        (moduleMain.swgg && moduleMain.swgg.apiDict) || {}\n    ).forEach(function (key) {\n        tmp = \"swgg.apiDict\";\n        opt.moduleDict[tmp] = opt.moduleDict[tmp] || {};\n        tmp = opt.moduleDict[tmp];\n        tmp[key + \".ajax\"] = (\n            moduleMain.swgg.apiDict[key]\n            && moduleMain.swgg.apiDict[key].ajax\n        );\n    });\n    // init moduleExtraDict\n    opt.moduleExtraDict[opt.env.npm_package_name] = (\n        opt.moduleExtraDict[opt.env.npm_package_name] || {}\n    );\n    module = opt.moduleExtraDict[opt.env.npm_package_name];\n    ([\n        1, 2, 3, 4\n    ]).forEach(function (depth) {\n        opt.libFileList = opt.libFileList.concat(\n            // find . -maxdepth 1 -mindepth 1 -name \"*.js\" -type f\n            // https://stackoverflow.com/questions/4509624/how-to-limit-depth-for-recursive-file-list\n            local.child_process.execSync(\n                \"find \\\"\" + opt.dir\n                + \"\\\" -maxdepth \" + depth + \" -mindepth \" + depth\n                + \" -name \\\"*.js\\\" -type f | sed -e \\\"s|\" + opt.dir\n                + \"/||\\\" | grep -iv \"\n/* jslint ignore:start */\n+ '\"\\\n/\\\\.\\\\|\\\\(\\\\b\\\\|_\\\\)\\\\(\\\narchive\\\\|artifact\\\\|asset\\\\|\\\nbower_component\\\\|build\\\\|\\\ncoverage\\\\|\\\ndoc\\\\|dist\\\\|\\\nexample\\\\|external\\\\|\\\nfixture\\\\|\\\ngit\\\\|\\\nlog\\\\|\\\nmin\\\\|mock\\\\|\\\nnode_module\\\\|\\\nrollup\\\\|\\\nspec\\\\|\\\ntest\\\\|tmp\\\\|\\\nvendor\\\\)s\\\\{0,1\\\\}\\\\(\\\\b\\\\|_\\\\)\\\n\" '\n/* jslint ignore:end */\n                + \" | sort | head -n 256\"\n            ).toString()\n            .split(\"\\n\")\n        );\n    });\n    opt.ii = 256;\n    opt.libFileList.every(function (file) {\n        local.tryCatchOnError(function () {\n            tmp = {};\n            tmp.name = local.path.basename(file)\n            .replace(\"lib.\", \"\")\n            .replace((\n                /\\.[^.]*?$/\n            ), \"\")\n            .replace((\n                /\\W/g\n            ), \"_\");\n            ([\n                tmp.name,\n                tmp.name.slice(0, 1).toUpperCase() + tmp.name.slice(1)\n            ]).some(function (name) {\n                tmp.isFiltered = name && (\n                    !opt.packageJson.main\n                    || (\"./\" + file).indexOf(opt.packageJson.main) < 0\n                ) && !module[name];\n                return !tmp.isFiltered;\n            });\n            if (!tmp.isFiltered) {\n                return;\n            }\n            console.error(\"apidocCreate - libFile \" + file);\n            tmp.module = opt.require(opt.dir + \"/\" + file);\n            // filter circular-reference\n            if (!(tmp.module && opt.circularSet.has(tmp.module))) {\n                return;\n            }\n            opt.ii -= 1;\n            module[tmp.name] = tmp.module;\n        }, console.error);\n        return opt.ii;\n    });\n    local.apidocModuleDictAdd(opt, opt.moduleExtraDict);\n    Object.keys(opt.moduleDict).forEach(function (key) {\n        if (key.indexOf(opt.env.npm_package_name + \".\") !== 0) {\n            return;\n        }\n        tmp = key.split(\".\").slice(1).join(\".\");\n        moduleMain[tmp] = moduleMain[tmp] || opt.moduleDict[key];\n    });\n    // init moduleList\n    opt.moduleList = Object.keys(opt.moduleDict)\n    .sort()\n    .map(function (prefix) {\n        module = opt.moduleDict[prefix];\n        // handle case where module is a function\n        if (typeof module === \"function\") {\n            local.tryCatchOnError(function () {\n                module[prefix.split(\".\").slice(-1)[0]] = (\n                    module[prefix.split(\".\").slice(-1)[0]] || module\n                );\n            }, console.error);\n        }\n        return {\n            elemList: Object.keys(module).filter(function (key) {\n                return local.tryCatchOnError(function () {\n                    return (\n                        key\n                        && (\n                            /^\\w[\\w\\-.]*?$/\n                        ).test(key)\n                        && key.indexOf(\"testCase_\") !== 0\n                        && (\n                            module[key] !== opt.blacklistDict[key]\n                            || opt.whitelistDict[key]\n                        )\n                    );\n                }, console.error);\n            }).map(function (key) {\n                return elemCreate(module, prefix, key);\n            }).sort(function (aa, bb) {\n                return (\n                    aa.name > bb.name\n                    ? 1\n                    : -1\n                );\n            }),\n            id: encodeURIComponent(\"apidoc.module.\" + prefix),\n            name: prefix\n        };\n    });\n    // render apidoc\n    opt.result = local.templateRender(opt.template, opt, {\n        notHtmlSafe: true\n    })\n    .trim()\n    .replace((\n        /\\u0020+$/gm\n    ), \"\") + \"\\n\";\n    return opt.result;\n};\n\nlocal.apidocModuleDictAdd = function (opt, moduleDict) {\n/*\n * this function will add the modules in <moduleDict> to <opt>.moduleDict\n */\n    var isModule;\n    var objectKeys;\n    var tmp;\n    objectKeys = function (dict) {\n    /*\n     * this function will return a list of the dict's keys, with valid getters\n     */\n        return Object.keys(dict).sort().filter(function (key) {\n            return local.tryCatchOnError(function () {\n                return dict[key] || true;\n            }, local.nop);\n        });\n    };\n    [\n        \"child\", \"prototype\", \"grandchild\", \"prototype\"\n    ].forEach(function (elem) {\n        objectKeys(moduleDict).forEach(function (prefix) {\n            if (!(\n                /^\\w[\\w\\-.]*?$/\n            ).test(prefix)) {\n                return;\n            }\n            objectKeys(moduleDict[prefix]).forEach(function (key) {\n                if (!(\n                    /^\\w[\\w\\-.]*?$/\n                ).test(key) || !moduleDict[prefix][key]) {\n                    return;\n                }\n                tmp = (\n                    elem === \"prototype\"\n                    ? {\n                        module: moduleDict[prefix][key].prototype,\n                        name: prefix + \".\" + key + \".prototype\"\n                    }\n                    : {\n                        module: moduleDict[prefix][key],\n                        name: prefix + \".\" + key\n                    }\n                );\n                if (\n                    !tmp.module\n                    || !(\n                        typeof tmp.module === \"function\"\n                        || typeof tmp.module === \"object\"\n                    )\n                    || Array.isArray(tmp.module)\n                    || opt.moduleDict[tmp.name]\n                    || opt.circularSet.has(tmp.module)\n                ) {\n                    return;\n                }\n                isModule = ([\n                    tmp.module,\n                    tmp.module.prototype\n                ]).some(function (dict) {\n                    return objectKeys(dict || {}).some(function (key) {\n                        return typeof dict[key] === \"function\";\n                    });\n                });\n                if (!isModule) {\n                    return;\n                }\n                opt.circularSet.add(tmp.module);\n                opt.moduleDict[tmp.name] = tmp.module;\n            });\n        });\n    });\n};\n}());\n\n\n\n// run node js-env code - init-after\n/* istanbul ignore next */\n(function () {\nif (local.isBrowser) {\n    return;\n}\n\n\n\nlocal.cliDict = {};\n\nlocal.cliDict._default = function () {\n/*\n * <moduleDirectory>\n * will create apidoc from <moduleDirectory>\n */\n    // jslint files\n    process.stdout.write(local.apidocCreate({\n        dir: process.argv[2],\n        modulePathList: module.paths\n    }));\n};\n\n// run the cli\nif (module === require.main && !globalThis.utility2_rollup) {\n    local.cliRun();\n}\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-apidoc-lite/example.js":"/*\nexample.js\n\nthis script will run a web-demo of apidoc-lite\n\ninstruction\n    1. save this script as example.js\n    2. run shell-command:\n        $ npm install apidoc-lite && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package apidoc */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw err.<message> if <passed> is falsy\n     */\n        var err;\n        if (passed) {\n            return;\n        }\n        err = (\n            // ternary-operator\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is errObj, then leave as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw err;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        target = target || {};\n        Object.keys(source || {}).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n        return target;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    || globalThis.utility2_apidoc\n    || globalThis.utility2_moduleExports\n);\n// init exports\nglobalThis.local = local;\n}());\n\n\n\n/* istanbul ignore next */\n// run browser js-env code - init-test\n(function () {\nif (!local.isBrowser) {\n    return;\n}\n// log stderr and stdout to #outputStdout1\n[\"error\", \"log\"].forEach(function (key) {\n    var argList;\n    var elem;\n    var fnc;\n    elem = document.querySelector(\n        \"#outputStdout1\"\n    );\n    if (!elem) {\n        return;\n    }\n    fnc = console[key];\n    console[key] = function () {\n        argList = Array.from(arguments); // jslint ignore:line\n        fnc.apply(console, argList);\n        // append text to #outputStdout1\n        elem.textContent += argList.map(function (arg) {\n            return (\n                typeof arg === \"string\"\n                ? arg\n                : JSON.stringify(arg, null, 4)\n            );\n        }).join(\" \").replace((\n            /\\u001b\\[\\d*m/g\n        ), \"\") + \"\\n\";\n        // scroll textarea to bottom\n        elem.scrollTop = elem.scrollHeight;\n    };\n});\nObject.assign(local, globalThis.domOnEventDelegateDict);\nglobalThis.domOnEventDelegateDict = local;\nlocal.onEventDomDb = (\n    local.db && local.db.onEventDomDb\n);\nlocal.testRunBrowser = function (evt) {\n/*\n * this function will run browser-tests\n */\n    switch (\n        !evt.ctrlKey\n        && !evt.metaKey\n        && (\n            evt.modeInit\n            || (evt.type + \".\" + (evt.target && evt.target.id))\n        )\n    ) {\n    // custom-case\n    case true:\n        return;\n    // run browser-tests\n    default:\n        if (\n            (evt.target && evt.target.id) !== \"testRunButton1\"\n            && !(evt.modeInit && (\n                /\\bmodeTest=1\\b/\n            ).test(location.search))\n        ) {\n            return;\n        }\n        // show browser-tests\n        if (document.querySelector(\n            \"#testReportDiv1\"\n        ).style.maxHeight === \"0px\") {\n            globalThis.domOnEventDelegateDict.domOnEventResetOutput();\n            local.uiAnimateSlideDown(document.querySelector(\n                \"#testReportDiv1\"\n            ));\n            document.querySelector(\n                \"#testRunButton1\"\n            ).textContent = \"hide internal test\";\n            local.modeTest = 1;\n            local.testRunDefault(local);\n            return;\n        }\n        // hide browser-tests\n        local.uiAnimateSlideUp(document.querySelector(\n            \"#testReportDiv1\"\n        ));\n        document.querySelector(\n            \"#testRunButton1\"\n        ).textContent = \"run internal test\";\n    }\n};\n\nlocal.testRunBrowser({\n    modeInit: true\n});\n}());\n\n\n\n/* istanbul ignore next */\n// run node js-env code - init-test\n(function () {\nif (local.isBrowser) {\n    return;\n}\n// init exports\nmodule.exports = local;\n/* validateLineSortedReset */\n// init assets\nlocal.assetsDict = local.assetsDict || {};\n[\n    \"assets.index.template.html\",\n    \"assets.swgg.swagger.json\",\n    \"assets.swgg.swagger.server.json\"\n].forEach(function (file) {\n    file = \"/\" + file;\n    local.assetsDict[file] = local.assetsDict[file] || \"\";\n    if (local.fs.existsSync(local.__dirname + file)) {\n        local.assetsDict[file] = local.fs.readFileSync(\n            local.__dirname + file,\n            \"utf8\"\n        );\n    }\n});\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.index.template.html\"] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"utf-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<!-- \"assets.utility2.template.html\" -->\\n\\\n<title>{{env.npm_package_name}} ({{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/* jslint utility2:true */\\n\\\n/*csslint\\n\\\n*/\\n\\\n/* csslint ignore:start */\\n\\\n*,\\n\\\n*:after,\\n\\\n*:before {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\n/* csslint ignore:end */\\n\\\n@keyframes uiAnimateShake {\\n\\\n0%,\\n\\\n50% {\\n\\\n    transform: translateX(10px);\\n\\\n}\\n\\\n100% {\\n\\\n    transform: translateX(0);\\n\\\n}\\n\\\n25%,\\n\\\n75% {\\n\\\n    transform: translateX(-10px);\\n\\\n}\\n\\\n}\\n\\\n@keyframes uiAnimateSpin {\\n\\\n0% {\\n\\\n    transform: rotate(0deg);\\n\\\n}\\n\\\n100% {\\n\\\n    transform: rotate(360deg);\\n\\\n}\\n\\\n}\\n\\\na {\\n\\\n    overflow-wrap: break-word;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #eef;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    font-size: small;\\n\\\n    margin: 0 40px;\\n\\\n}\\n\\\nbody > div,\\n\\\nbody > form > div,\\n\\\nbody > form > input,\\n\\\nbody > form > pre,\\n\\\nbody > form > .button,\\n\\\nbody > form > .textarea,\\n\\\nbody > input,\\n\\\nbody > pre,\\n\\\nbody > .button,\\n\\\nbody > .textarea {\\n\\\n    margin-bottom: 20px;\\n\\\n    margin-top: 0;\\n\\\n}\\n\\\nbody > form > input,\\n\\\nbody > form > .button,\\n\\\nbody > input,\\n\\\nbody > .button {\\n\\\n    width: 20rem;\\n\\\n}\\n\\\nbody > form > .textarea,\\n\\\nbody > .textarea {\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\nbody > .readonly {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\ncode,\\n\\\npre,\\n\\\n.textarea {\\n\\\n    font-family: Consolas, Menlo, monospace;\\n\\\n    font-size: smaller;\\n\\\n}\\n\\\npre {\\n\\\n    overflow-wrap: break-word;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\n.button {\\n\\\n    background-color: #fff;\\n\\\n    border: 1px solid;\\n\\\n    border-bottom-color: rgb(186, 186, 186);\\n\\\n    border-left-color: rgb(209, 209, 209);\\n\\\n    border-radius: 4px;\\n\\\n    border-right-color: rgb(209, 209, 209);\\n\\\n    border-top-color: rgb(216, 216, 216);\\n\\\n    color: #00d;\\n\\\n    cursor: pointer;\\n\\\n    display: inline-block;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    font-size: 12px;\\n\\\n    font-style: normal;\\n\\\n    font-weight: normal;\\n\\\n    margin: 0;\\n\\\n    padding: 2px 7px 3px 7px;\\n\\\n    text-align: center;\\n\\\n    text-decoration: underline;\\n\\\n}\\n\\\n.colorError {\\n\\\n    color: #d00;\\n\\\n}\\n\\\n.textarea {\\n\\\n    background: #fff;\\n\\\n    border: 1px solid #999;\\n\\\n    border-radius: 0;\\n\\\n    cursor: auto;\\n\\\n    overflow: auto;\\n\\\n    padding: 2px;\\n\\\n}\\n\\\n.uiAnimateShake {\\n\\\n    animation-duration: 500ms;\\n\\\n    animation-name: uiAnimateShake;\\n\\\n}\\n\\\n.uiAnimateSlide {\\n\\\n    overflow-y: hidden;\\n\\\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.zeroPixel {\\n\\\n    border: 0;\\n\\\n    height: 0;\\n\\\n    margin: 0;\\n\\\n    padding: 0;\\n\\\n    width: 0;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\\n\\\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\\n\\\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\\n\\\n<input class=\"zeroPixel\" data-onevent=\"onEventDomDb\" data-onevent-db=\"dbImportInput\" type=\"file\">\\n\\\n<script>\\n\\\n/* jslint utility2:true */\\n\\\n// init domOnEventWindowOnloadTimeElapsed\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will measure and print time-elapsed for window.onload\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (window.domOnEventWindowOnloadTimeElapsed) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        setTimeout(function () {\\n\\\n            window.domOnEventWindowOnloadTimeElapsed = (\\n\\\n                Date.now()\\n\\\n                - window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n            console.error(\\n\\\n                \"domOnEventWindowOnloadTimeElapsed = \"\\n\\\n                + window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n        }, 100);\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventDelegateDict\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will handle delegated dom-event\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    var timerTimeoutDict;\\n\\\n    if (window.domOnEventDelegateDict) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventDelegateDict = {};\\n\\\n    timerTimeoutDict = {};\\n\\\n    window.domOnEventDelegateDict.domOnEventDelegate = function (evt) {\\n\\\n        evt.targetOnEvent = evt.target.closest(\\n\\\n            \"[data-onevent]\"\\n\\\n        );\\n\\\n        if (\\n\\\n            !evt.targetOnEvent\\n\\\n            || evt.targetOnEvent.dataset.onevent === \"domOnEventNop\"\\n\\\n            || evt.target.closest(\\n\\\n                \".disabled, .readonly\"\\n\\\n            )\\n\\\n        ) {\\n\\\n            return;\\n\\\n        }\\n\\\n        // rate-limit high-frequency-event\\n\\\n        switch (evt.type) {\\n\\\n        case \"keydown\":\\n\\\n        case \"keyup\":\\n\\\n            // filter non-input keyboard-event\\n\\\n            if (!evt.target.closest(\\n\\\n                \"input, option, select, textarea\"\\n\\\n            )) {\\n\\\n                return;\\n\\\n            }\\n\\\n            if (timerTimeoutDict[evt.type] !== true) {\\n\\\n                timerTimeoutDict[evt.type] = timerTimeoutDict[\\n\\\n                    evt.type\\n\\\n                ] || setTimeout(function () {\\n\\\n                    timerTimeoutDict[evt.type] = true;\\n\\\n                    window.domOnEventDelegateDict.domOnEventDelegate(evt);\\n\\\n                }, 50);\\n\\\n                return;\\n\\\n            }\\n\\\n            timerTimeoutDict[evt.type] = null;\\n\\\n            break;\\n\\\n        }\\n\\\n        switch (evt.targetOnEvent.tagName) {\\n\\\n        case \"BUTTON\":\\n\\\n        case \"FORM\":\\n\\\n            evt.preventDefault();\\n\\\n            break;\\n\\\n        }\\n\\\n        evt.stopPropagation();\\n\\\n        window.domOnEventDelegateDict[evt.targetOnEvent.dataset.onevent](\\n\\\n            evt\\n\\\n        );\\n\\\n    };\\n\\\n    window.domOnEventDelegateDict.domOnEventResetOutput = function () {\\n\\\n        Array.from(document.querySelectorAll(\\n\\\n            \".onevent-reset-output\"\\n\\\n        )).forEach(function (elem) {\\n\\\n            switch (elem.tagName) {\\n\\\n            case \"INPUT\":\\n\\\n            case \"TEXTAREA\":\\n\\\n                elem.value = \"\";\\n\\\n                break;\\n\\\n            case \"PRE\":\\n\\\n                elem.textContent = \"\";\\n\\\n                break;\\n\\\n            default:\\n\\\n                elem.innerHTML = \"\";\\n\\\n            }\\n\\\n        });\\n\\\n    };\\n\\\n    // init event-handling\\n\\\n    [\\n\\\n        \"change\",\\n\\\n        \"click\",\\n\\\n        \"keydown\",\\n\\\n        \"submit\"\\n\\\n    ].forEach(function (eventType) {\\n\\\n        document.addEventListener(\\n\\\n            eventType,\\n\\\n            window.domOnEventDelegateDict.domOnEventDelegate\\n\\\n        );\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init timerIntervalAjaxProgressUpdate\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will increment ajax-progress-bar\\n\\\n * until webpage has loaded\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    var ajaxProgressDiv1;\\n\\\n    var ajaxProgressState;\\n\\\n    var ajaxProgressUpdate;\\n\\\n    if (\\n\\\n        window.timerIntervalAjaxProgressUpdate\\n\\\n        || !document.querySelector(\\n\\\n            \"#ajaxProgressDiv1\"\\n\\\n        )\\n\\\n    ) {\\n\\\n        return;\\n\\\n    }\\n\\\n    ajaxProgressDiv1 = document.querySelector(\\n\\\n        \"#ajaxProgressDiv1\"\\n\\\n    );\\n\\\n    setTimeout(function () {\\n\\\n        ajaxProgressDiv1.style.width = \"25%\";\\n\\\n    });\\n\\\n    ajaxProgressState = 0;\\n\\\n    ajaxProgressUpdate = (\\n\\\n        window.local\\n\\\n        && window.local.ajaxProgressUpdate\\n\\\n    ) || function () {\\n\\\n        ajaxProgressDiv1.style.width = \"100%\";\\n\\\n        setTimeout(function () {\\n\\\n            ajaxProgressDiv1.style.background = \"transparent\";\\n\\\n            setTimeout(function () {\\n\\\n                ajaxProgressDiv1.style.width = \"0%\";\\n\\\n            }, 500);\\n\\\n        }, 1000);\\n\\\n    };\\n\\\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\\n\\\n        ajaxProgressState += 1;\\n\\\n        ajaxProgressDiv1.style.width = Math.max(\\n\\\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\\n\\\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\\n\\\n        ) + \"%\";\\n\\\n    }, 1000);\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\\n\\\n        ajaxProgressUpdate();\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventSelectAllWithinPre\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\\n\\\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (window.domOnEventSelectAllWithinPre) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventSelectAllWithinPre = function (evt) {\\n\\\n        var range;\\n\\\n        var selection;\\n\\\n        if (\\n\\\n            evt\\n\\\n            && evt.key === \"a\"\\n\\\n            && (evt.ctrlKey || evt.metaKey)\\n\\\n            && evt.target.closest(\\n\\\n                \"pre\"\\n\\\n            )\\n\\\n        ) {\\n\\\n            range = document.createRange();\\n\\\n            range.selectNodeContents(evt.target.closest(\\n\\\n                \"pre\"\\n\\\n            ));\\n\\\n            selection = window.getSelection();\\n\\\n            selection.removeAllRanges();\\n\\\n            selection.addRange(range);\\n\\\n            evt.preventDefault();\\n\\\n        }\\n\\\n    };\\n\\\n    // init event-handling\\n\\\n    document.addEventListener(\\n\\\n        \"keydown\",\\n\\\n        window.domOnEventSelectAllWithinPre\\n\\\n    );\\n\\\n}());\\n\\\n</script>\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} ({{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\\n\\\n<button class=\"button\" data-onevent=\"testRunBrowser\" data-onevent-reset-output=\"1\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<pre class=\"onevent-reset-output readonly textarea\" id=\"outputStdout1\" tabIndex=\"0\"></pre>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore.counter += 1;</script>\\n\\\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\\n\\\n<script src=\"assets.apidoc.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore();</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n/* jslint ignore:end */\n/* validateLineSortedReset */\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.apidoc.js\"] =\n    local.assetsDict[\"/assets.apidoc.js\"] ||\n    local.fs.readFileSync(local.__dirname + \"/lib.apidoc.js\", \"utf8\"\n).replace((/^#!\\//), \"// \");\n/* jslint ignore:end */\n/* validateLineSortedReset */\nlocal.assetsDict[\"/\"] = local.assetsDict[\"/assets.index.template.html\"]\n.replace((\n    /\\{\\{env\\.(\\w+?)\\}\\}/g\n), function (match0, match1) {\n    switch (match1) {\n    case \"npm_package_description\":\n        return \"the greatest app in the world!\";\n    case \"npm_package_name\":\n        return \"apidoc-lite\";\n    case \"npm_package_nameLib\":\n        return \"apidoc\";\n    case \"npm_package_version\":\n        return \"0.0.1\";\n    default:\n        return match0;\n    }\n});\nlocal.assetsDict[\"/assets.example.html\"] = local.assetsDict[\"/\"];\nlocal.assetsDict[\"/index.html\"] = local.assetsDict[\"/\"];\n// init cli\nif (module !== require.main || globalThis.utility2_rollup) {\n    return;\n}\n/* validateLineSortedReset */\nlocal.assetsDict[\"/assets.example.js\"] = (\n    local.assetsDict[\"/assets.example.js\"]\n    || local.fs.readFileSync(__filename, \"utf8\")\n);\nlocal.assetsDict[\"/favicon.ico\"] = local.assetsDict[\"/favicon.ico\"] || \"\";\n// if $npm_config_timeout_exit exists,\n// then exit this process after $npm_config_timeout_exit ms\nif (Number(process.env.npm_config_timeout_exit)) {\n    setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n}\n// start server\nif (globalThis.utility2_serverHttp1) {\n    return;\n}\nprocess.env.PORT = process.env.PORT || \"8081\";\nconsole.error(\"http-server listening on port \" + process.env.PORT);\nlocal.http.createServer(function (req, res) {\n    req.urlParsed = local.url.parse(req.url);\n    if (local.assetsDict[req.urlParsed.pathname] !== undefined) {\n        res.end(local.assetsDict[req.urlParsed.pathname]);\n        return;\n    }\n    res.statusCode = 404;\n    res.end();\n}).listen(process.env.PORT);\n}());\n\n\n\n}());\n"}